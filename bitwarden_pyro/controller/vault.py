from subprocess import CalledProcessError
import subprocess as sp
import json

from bitwarden_pyro.util.logger import ProjectLogger
from bitwarden_pyro.controller.cache import Cache


class Vault:
    def __init__(self, expiry):
        self._items = None
        self._key = None
        self._filter = None

        self._cache = Cache(expiry)
        self._logger = ProjectLogger().get_logger()

    def has_cache(self):
        return self._cache.has_items()

    def set_key(self, key):
        self._logger.debug("Vault key set")
        self._key = key

    def set_filter(self, folder_filter):
        self._logger.debug("Vault folder filter set")
        self._filter = folder_filter

    def has_filter(self):
        return self._filter is not None

    def get_filter(self):
        return self._filter

    def sync(self):
        try:
            self._logger.info("Syncing items with bitwarden")

            sync_cmd = f"bw sync --session {self._key}"
            sp.run(sync_cmd.split(), capture_output=True, check=True)
        except CalledProcessError:
            raise SyncException("Failed to force a bitwarden sync")

    def __get_item_property(self, item, field):
        try:
            self._logger.info("Requesting %s from bitwarden", field)

            cmd = ['bw', '--session', self._key, 'get', field, item['id']]
            proc = sp.run(cmd, capture_output=True, check=True)

            output = proc.stdout.decode("utf-8")
            return output
        except CalledProcessError:
            raise LoadException(f"Failed to retrieve {field} from bw")

    def get_item_full(self, item):
        if self._cache.has_items():
            return json.loads(self.__get_item_property(item, 'item'))
        else:
            return item

    def get_item_topt(self, item):
        return self.__get_item_property(item, 'totp')

    def load_items(self, use_cache=True):
        try:
            if use_cache and self.has_cache():
                self._logger.info("Loading items from cache")
                self._items = self._cache.get()
            else:
                self._logger.info("Loading items from bw")
                load_cmd = f"bw list items --session {self._key}"

                proc = sp.run(load_cmd.split(),
                              capture_output=True, check=True)
                items_json = proc.stdout.decode("utf-8")
                self._items = json.loads(items_json)

                if self._cache.should_cache():
                    self._cache.save(self._items)
        except CalledProcessError:
            raise LoadException("Failed to load vault items from bitwarden")

    def get_folders(self):
        try:
            self._logger.info("Getting folders from bw")
            cmd = f"bw list folders --session {self._key}"

            proc = sp.run(cmd.split(), capture_output=True, check=True)
            folders = proc.stdout.decode("utf-8")
            return json.loads(folders)
        except CalledProcessError:
            raise LoadException("Failed to load vault items from bitwarden")

    def get_items(self):
        if not self._filter:
            return self._items
        else:
            return [
                i for i in self._items
                if i.get('folderId') is not None
                and i.get('folderId') == self._filter['id']
            ]

    def get_by_name(self, name):
        items = [i for i in self._items if i['name'] == name]
        if len(items) == 1:
            return items[0]
        else:
            return items


class VaultException(Exception):
    """Base class for items generated by Vault"""


class LoadException(VaultException):
    """Raised when vault fails to load items"""


class SyncException(VaultException):
    """Raised when bitwarden fails to sync"""
