from bitwarden_pyro.util.logger import ProjectLogger

from subprocess import CalledProcessError
import subprocess as sp
import json


class Vault:
    def __init__(self):
        self._items = None
        self._key = None
        self._filter = None

        self._logger = ProjectLogger().get_logger()

    def set_key(self, key):
        self._logger.debug("Vault key set")
        self._key = key

    def set_filter(self, filter):
        self._logger.debug("Vault folder filter set")
        self._filter = filter

    def has_filter(self):
        return self._filter is not None

    def get_filter(self):
        return self._filter

    def sync(self):
        try:
            self._logger.info("Syncing items with bitwarden")

            sync_cmd = f"bw sync --session {self._key}"
            sp.run(sync_cmd.split(), capture_output=True, check=True)
        except CalledProcessError:
            self._logger.error("Failed to force a bitwarden sync")
            raise SyncException

    def get_topt(self, guid):
        try:
            self._logger.info("Requesting TOPT from bitwarden")

            cmd = ['bw', '--session', self._key, 'get', 'totp', guid]
            proc = sp.run(cmd, capture_output=True)

            output = proc.stdout.decode("utf-8")
            if proc.returncode == 0:
                return output
            elif "No TOTP available for this login" in output:
                return None
            else:
                raise LoadException
        except CalledProcessError:
            self._logger.error("Failed to retrieve TOTP")
            raise LoadException

    def load_items(self):
        try:
            self._logger.info("Loading items from bw")
            load_cmd = f"bw list items --session {self._key}"

            proc = sp.run(load_cmd.split(), capture_output=True, check=True)
            items_json = proc.stdout.decode("utf-8")
            self._items = json.loads(items_json)

            return len(self._items)
        except CalledProcessError:
            self._logger.error("Failed to load vault items from bitwarden")
            return 0

    def get_folders(self):
        try:
            self._logger.info("Getting folders from bw")
            cmd = f"bw list folders --session {self._key}"

            proc = sp.run(cmd.split(), capture_output=True, check=True)
            folders = proc.stdout.decode("utf-8")
            return json.loads(folders)
        except CalledProcessError:
            self._logger.error("Failed to load vault items from bitwarden")
            raise LoadException

    def get_items(self):
        if not self._filter:
            return self._items
        else:
            return [
                i for i in self._items
                if i.get('folderId') is not None
                and i.get('folderId') == self._filter['id']
            ]

    def get_by_name(self, name):
        items = [i for i in self._items if i['name'] == name]
        if len(items) == 1:
            return items[0]
        else:
            return items


class VaultException(Exception):
    """Base class for items generated by Vault"""
    pass


class LoadException(VaultException):
    """Raised when vault fails to load items"""
    pass


class SyncException(VaultException):
    """Raised when bitwarden fails to sync"""
    pass
